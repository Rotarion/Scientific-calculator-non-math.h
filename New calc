#include <iostream>
#include <bits/stdc++.h>    //
#include <iomanip>
#include <complex>          //
#include <valarray>
using namespace std;

double e = 2.718281828;
double pi = 3.1415926535;
double calculatorfunction (double a, double b, string op);
int fact(int n);
int comb(int n, int r);
int per(int n, int r);
double sinh(double n);
double cosh(double n);
double tanh(double n);
int fibonnaci (double n);
int pasca(double rows);
float a_sequence(float a, float d, int n);
float a_sum(float a, float d, int n);
float g_sequence(float a, float r, int n);
float g_sum(float a, float r, int n);
float s_interest(float principal, float rate, float time);
float compound_interest(float principal, float rate, float time, int n);
float apr(float fees, float interest, float principal, int n);
float mean(float sum, float numberTerms);
float median(float n);
int variance(int a[], int n);
double standardDeviation(int arr[], int n);
double radian_to_degree(float n);
double polar_to_rectangular(float r , float theta);
double rectangular_to_polar (float x, float y);
double natural_Log(double n);
double Log(double n);
double exponentialE(double n);
double exponential2(double n);
double exponential (double a, double n);
double Gsin (float n);
double Gcos (float n);
double Gtan (float n);
double Gcsc (float n);
double Gsec (float n);
double Gcotan (float n);
double InvSine (float n);
double InvCos (float n);
double InvTan (float n);


int main()
{
    cout << Gsin(45) << endl;       // grades
    cout << Gcos(45) << endl;
    cout << Gtan(45) << endl;

    cout << sin(45) << endl;        // radians
    cout << cos(45) << endl;
    return 0;
}

double calculatorfunction (double a, double b, string op)
{
    double result = 0.0;

    if (op.compare("+"))
    {
        result = a + b;
    }
    else if (op.compare("-"))
    {
        result = a - b;
    }
    else if (op.compare("*"))
    {
        result = a * b;
    }
    else if (op.compare("/"))
    {
        result = a / b;
    }
    else if (op.compare("^"))
    {
        result = pow(a,b);
    }
    else if (op.compare("F"))
    {
        b = 0;
        result = fact(a);
    }
    else if (op.compare("Comb"))
    {
        result = comb(a,b);
    }
    else if (op.compare("Perm"))
    {
        result = per(a,b);
    }
    else if (op.compare("Sinh"))
    {
        b = 0;
        result = sinh(a);
    }
    else if (op.compare("Cosh"))
    {
        b = 0;
        result = cosh(a);
    }
    else if (op.compare("Tanh"))
    {
        b = 0;
        result = tanh(a);
    }
    else if (op.compare("Fibonnaci"))
    {
        b = 0;
        result = fibonnaci(a);
    }
    else if (op.compare("Pascal"))
    {
        b = 0;
        result = pasca(a);
    }
    else
    {
        cout << "Bad input please go back to inputs and select a proper input." << endl;
        return 0;
    }
    return result;
}

int fact(int n)         //formula for factorial
{
    if (n == 0 || n == 1)
    {
        return 1;
    }
    else if (n < 0)
    {
        cout << "Sorry factorials can only be used on positive integers." << endl;
    }
    else
    {
        return n * fact(n-1);
    }
}

int comb(int n, int r)  //formula for the combination
{
   return fact(n) / (fact(r) * fact(n-r)) ;
}

int per(int n, int r)   //formula for the permutation
{
    return fact(n) / fact(n-r);
}

double sinh(double n)
{
    return  (pow(e,n)-pow(e,-n))/2;
}

double cosh(double n)
{
    return  (pow(e,n)-pow(e,-n))/2;
}

double tanh(double n)
{
    return  (pow(e,n)-pow(e,-n))/(pow(e,n)+pow(e,-n));
}

int fibonnaci (double n) // Fibonnaci formula
{
   int t1 = 0, t2 = 1, nextTerm = 0;

    for (int i = 1; i <= n; ++i)
    {
        // Prints the first two terms.
        if(i == 1)
        {
            cout << " " << t1;
            continue;
        }
        if(i == 2)
        {
            cout << t2 << " ";
            continue;
        }
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;

         cout << nextTerm << " ";
    }
}

int pasca(double rows) // Pascal's triangle formula
{
    if (rows >=21)
    {
        cout << "Sorry memorry error the calculator can only run 20 rows." << endl;
    }
    else if (rows <= 1)
    {
        int coef = 1;

        for(int i = 0; i < rows; i++)
        {
            for(int space = 1; space <= rows-i; space++) // Space for rows
                cout <<"  ";

            for(int j = 0; j <= i; j++) // For loop in order to get the coefficient.
            {
                if (j == 0 || i == 0)
                    coef = 1;
                else
                    coef = coef*(i-j+1)/j;

                cout << coef << "   ";
            }
            cout << endl;
        }
    }
    else{
        cout << "Please enter a positive integer.";
    }
}

float a_sequence(float a, float d, int n)   // Arithmetic sequence formula
{
    float nthterm;
    for(int i=0; i <= n; i++)
    {
        nthterm = a + (n-1) * d;
    }
    return nthterm;
}

float a_sum(float a, float d, int n)        // Arithmetic summation formula
{
    float sum;
    for(int i=0; i < n; i++)
    {
        sum = (n/2)*(2 * a + (n+1) * d);
    }
    return sum;
}

float g_sequence(float a, float r, int n)   // Geometric sequence formula
{
    float nthterm;              // We gold the nth term of the summation.
    for (int i=0; i <= n; i++)  // We start at 0 an go after n. We can write it without the <= and having only < but we would have to leave n without -1 which is not preferred.
    {
        nthterm = a * pow(r,(n-1));
    }
    return nthterm;
}

float g_sum(float a, float r, int n)        // Geometric summation formula
{
    float sum;
    for(int i=0; i <= n; i++)
    {
        sum = (a * (pow(r,n)-1))/(r-1);
    }
    return sum;
}

float simple_interest(float principal, float rate, float time)            // Simple interest formula rate is in % so we use 0.06 for 6%
{
    float result;

    result = principal * (1 + rate * time);

    return result;
}

float compound_interest(float principal, float rate, float time, int n)   // r is in % so 6% would be 0.06, n is 1 for yearly and t is the amount of time so 3 for 3 years.
{
    float result;

    result = principal * (pow((1 + rate / n), (n*time)));

    return result;
}

float apr(float fees, float interest, float principal, int n)             // n number of days in loan term, the others are self explanatory, yet interest or fees can be 0.
{
    float total;

    total = (((( fees + interest) / principal) / n) * 365) * 100;       // Get the % of APR you are paying.

    return total;
}

float mean(float sum, float numberTerms)
{
    return sum/numberTerms;
}

float median(float n)
{
    return (n+1)/2;
}

int variance(int a[], int n)
{
    // Compute mean (average of elements)
    int sum = 0;
    for (int i = 0; i < n; i++)
        sum += a[i];
    double mean = (double)sum /
                  (double)n;

    // Compute sum squared
    // differences with mean.
    double sqDiff = 0;
    for (int i = 0; i < n; i++)
        sqDiff += (a[i] - mean) *
                  (a[i] - mean);
    return sqDiff / n;
}

double standardDeviation(int arr[], int n)
{
    return sqrt(variance(arr, n));
}

double radian_to_degree(float n)
{
    double angledivide;

    angledivide = n * (pi / 180);

    return angledivide;
}

double polar_to_rectangular(float r , float theta)
{
    double x, y;

    x = r * cos(radian_to_degree(theta));
    y = r * sin(radian_to_degree(theta));

    cout << "Your x value is " << x << " your y value is " << y << "." << endl;
    return 0;
}

double rectangular_to_polar (float x, float y)
{
    double r, theta;

    r = sqrt(pow(x, 2) + pow (y, 2));
    theta = atan (y / x) * 180 / pi;

    cout << "Your r value is " << r << " and your angle value is " << theta << " degrees.";
    return 0;
}

double natural_Log(double n)
{
    return log(n);
}

double Log(double n)
{
    return log10(n);
}

double exponentialE(double n)
{
    return pow(e, n);
}

double exponential2(double n)
{
    return pow(n, 2);
}

double exponential (double a, double n)
{
    return pow(a, n);
}

double Gsin (float n)
{
    return sin(radian_to_degree((n)));
}

double Gcos (float n)
{
    return cos(radian_to_degree((n)));
}

double Gtan (float n)
{
    return tan(radian_to_degree((n)));
}

double Gcsc (float n)
{
    return 1/sin(radian_to_degree((n)));
}

double Gsec (float n)
{
    return 1/cos(radian_to_degree((n)));
}

double Gcotan (float n)
{
    return 1/tan(radian_to_degree((n)));
}

double InvSine (float n)
{
    return asin(n)*180 /pi;
}

double InvCos (float n)
{
    return acos(n)*180 /pi;
}

double InvTan (float n)
{
    return atan(n)*180 /pi;
}
